linux debug(lidbg)
此项目是以调试为目的，方便调试和控制外设，如在终端直接控制i2c，io，spi，读内存寄存器等。后来运用在产品中，目前我们写的驱动均是以ko的形式加载运行，代码集成在lidbg中。

--------代码下载方法----------
git clone qcom_share@192.168.9.222:/home/qcom_share/lidbg_qrd
密码：8x25q

----------代码结构----------
主要包含应用层（android），基础驱动模块（drv），具体工作模块（mywork），编译脚本（shell），输出目录（out/out_release）。

*应用层（android）
android/lidbg_servicer ：启动自动运行，用于加载模块，接收内核模块的消息作相应处理，在内核层不方便实现的功能在此处理。
android/uart_send_rec_test：用于串口稳定性测试。
android/usb_sd_mount_test：用于U盘和SD卡插拔稳定性测试。
android/out：编译后自动生成， 应用层生成的目标文件。

*基础驱动模块（drv）
作用主要有两个：
1.封装不同soc的底层实现（i2c / io / spi / ad / pwm等），提供通用接口给其他模块。通过共享其包含指针函数的结构体地址，给其他模块（主要是mywork下的模块）调用。
2.创建节点/dev/mlidbg0，提供在shell终端控制外设调试的命令，具体的命令参考drv\msm8x25\need\echo_shell_msm8x25.txt。

*具体工作模块（mywork）
mywork下是一些具体实际的工作，为了保证其平台可移植性，尽量不要调用soc的底层函数，而是调用drv提供的通用接口：
mywork\example：调用drv的函数接口例子。
mywork\bp_msg：打印bp写入共享内存的调试信息。
mywork\devices：控制一些系统正常运行必须的外设。
mywork\fastboot：处理车机休眠唤醒相关。
mywork\gps：ublox驱动。
mywork\touchscreen：电容屏相关驱动。
mywork\videoin：视频输入驱动。

*编译脚本（shell）
shell：编译使用到的脚本。

输出目录（out/out_release）
out：编译后自动生成，存放所有编译生成的模块。
out_release：编译后自动生成，存放产品正式包需要的模块，由shell/copy_out_release.sh脚本指定。产品正式打包时只提供此目录。

----------编译方法----------
1.配置编译环境
cd lidbg_qrd
(1) cp ./drv/msm8x25/need/dbg_cfg_backup.sh ./dbg_cfg.sh
(2) 修改DBG_SYSTEM_DIR环境变量(指向的包的内核需编译过一遍(make bootimage))
(3) chmod 777  ./* -R
以上步骤只需配置一次

dbg_cfg.sh编译环境变量配置说明：
＊DBG_PLATFORM:
msm7627a--8x25平台
msm8625--8x25q平台

＊BUILD_VERSION
dbg--编译出运行在原生系统的模块
rel--编译出运行在发布产品系统的模块

*BOARD_VERSION
v1--适用于8x25第一版硬件（pcb）
v2--适用于8x25第二版及最后量产硬件（pcb）
v3--适用于8x25q车机第一版硬件（pcb）

2.编译
*模块提供两种方法
(1) 编译所有模块，在lidbg根目录运行build_rel.sh
(2) 编译单独模块，如在lidbg根目录执行:
./make.sh mywork/msm8x25/gps
./make.sh drv

生成模块在out目录

*lidbg_servicer
在终端执行android/lidbg_servicer目录下的build.sh脚本,生成模块在android/out目录

3.运行clean.sh可清除所有编译后产生的文件。


----------运行----------
正式产品包已经默认加载lidbg相关模块，要是在原生系统想要运行lidbg模块，按下方法：
在原生系统模块放到/system/lib/modules/out,产品系统中模块放到/flysystem/lib/modules
以下两种方法均可运行模块
1.在终端用ismod指令直接加载模块
见drv/msm8x25/need/echo_shell_msm8x25.txt文件insmod下  (正式产品是flysystem目录)

2. 开机自动运行lidbg_servicer加载模块 
把lidbg_servicer打包进系统，在文件out/target/product/msm7627a/root/init.qcom.rc添加
chmod 777 /system/bin/lidbg_servicer  (正式产品是/flysystem/bin目录)
和
service lidbg_servicer /system/bin/logwrapper /system/bin/lidbg_servicer  (正式产品是/flysystem/bin目录)
    class late_start
    user root
    group root


----------git使用注意事项----------
1.参考qcom_share 的《git提交规范.txt》
2.个人的测试代码不要push 到服务器master分支，如需要可创建自己的测试分支再push这个分支到服务器。
把本地分支(locate_branch_name) push到服务器(remote_branch_name)
git push origin locate_branch_name:remote_branch_name 
查看远程分支
git branch -r
git pull origin remote_branch_name:locate_branch_name
