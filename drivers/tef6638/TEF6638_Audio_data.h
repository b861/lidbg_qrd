#ifndef __TEF6638_DATA_H__
#define __TEF6638_DATA_H__

#define TEST_MODE     11
#define KEYCODE_MODE  22

#define MODE_SEL  0//KEYCODE_MODE//TEST_MODE

#ifdef __cplusplus
extern "C"
{
#endif



//<YA_Vol_Main1P> 0D 10 50 2个字节
//<YA_Vol_Main2P> 0D 10 51 2个字节
//<YA_Vol_Main1S> 0D 10 52 2个字节
//<YA_Vol_Main2S> 0D 10 53 2个字节
const BYTE TEF6638_Volume_Data[]={
0x00, 0x83, 0x00, 0x08,//-60dB
0x02, 0x00, 0x00, 0x37,//-31.05dB
0x02, 0x00, 0x00, 0x3F,//-29.84dB
0x02, 0x00, 0x00, 0x48,//-28.63dB
0x02, 0x00, 0x00, 0x52,//-27.43dB
0x02, 0x00, 0x00, 0x6A,//-26.22dB
0x02, 0x00, 0x00, 0x79,//-25.02dB
0x02, 0x00, 0x00, 0x8A,//-23.81dB
0x02, 0x00, 0x00, 0x9E,//-22.60dB
0x02, 0x00, 0x00, 0xB4,//-21.40dB
0x02, 0x00, 0x00, 0xCD,//-20.19dB
0x02, 0x00, 0x00, 0xEA,//-18.98dB
0x02, 0x00, 0x01, 0x0B,//-17.78dB
0x02, 0x00, 0x01, 0x31,//-16.57dB
0x02, 0x00, 0x01, 0x5C,//-15.37dB
0x02, 0x00, 0x01, 0x8D,//-14.16dB
0x02, 0x00, 0x01, 0xC4,//-12.95dB
0x02, 0x04, 0x02, 0x00,//-11.75dB
0x02, 0x4D, 0x02, 0x00,//-10.54dB
0x02, 0x9F, 0x02, 0x00,//-9.33dB
0x02, 0xFE, 0x02, 0x00,//-8.13dB

0x02, 0xFE, 0x02, 0x00,

0x03, 0x6A, 0x02, 0x00,//-6.92dB

0x03, 0xE5, 0x02, 0x00,

0x04, 0x71, 0x02, 0x00,//-5.71dB

0x05, 0x11, 0x02, 0x00,

0x05, 0x11, 0x02, 0x00,//-4.51dB

0x05, 0xC7, 0x02, 0x00,

0x05, 0xC7, 0x02, 0x00,//-3.30dB

0x06, 0x97, 0x02, 0x00,

0x06, 0x97, 0x02, 0x00,//-2.10dB

0x07, 0xFF, 0x02, 0x00,

0x07, 0xFF, 0x02, 0x00,//-0.89dB

0x07, 0xFF, 0x02, 0x00,

0x07, 0xFF, 0x02, 0x00,//0dB

0x07, 0xFF, 0x02, 0x25,

0x07, 0xFF, 0x02, 0x72,//1.52dB	

0x07, 0xFF, 0x02, 0xCA,

0x07, 0xFF, 0x02, 0xCA,//2.73dB	

0x07, 0xFF, 0x03, 0x2F,

0x07, 0xFF, 0x03, 0x2F,//3.94dB	

0x07,0xFF,0x03,0xA2,

0x07,0xFF,0x03,0xA2,//5.14dB	

0x07,0xFF,0x04,0x24,

0x07,0xFF,0x04,0x24,//6.35dB

0x07,0xFF,0x04,0xBA,

0x07,0xFF,0x04,0xBA,//7.56dB

0x07,0xFF,0x05,0x64,

0x07,0xFF,0x05,0x64,//8.76dB

0x07,0xFF,0x06,0x26,

0x07,0xFF,0x06,0x26,//9.97dB

0x07,0x04,0x07,0x03,

0x07,0x04,0x07,0x03,//11.17dB

0x07,0xFF,0x07,0xFF,

0x07,0xFF,0x07,0xFF//12.38dB

/*

0x08, 0x00, 0x05, 0xAF,

0x08, 0x00, 0x06, 0x0F,//13.59dB

0x08, 0x00, 0x06, 0x9F,

0x08, 0x00, 0x06, 0xF6,//14.79dB

0x08, 0x00, 0x07, 0x9F,

0x08, 0x00, 0x07, 0xFF//16.00dB

0x07,0xFF,0x02,0x00,//0dB
0x07,0xFF,0x02,0x25,
0x07,0xFF,0x02,0x72,
0x07,0xFF,0x02,0xCA,
0x07,0xFF,0x03,0x2F,//4dB

0x07,0xFF,0x03,0xA2,
0x07,0xFF,0x04,0x24,
0x07,0xFF,0x04,0xBA,//7dB
0x07,0xFF,0x05,0x64,//9dB
0x07,0xFF,0x06,0x26,
0x07,0x04,0x07,0x03,
0x07,0xFF,0x07,0xFF//12dB
*/
};

//<YA_Vol_BalPL> 0D 10 25 2个字节
//<YA_Vol_BalPR> 0D 10 26 2个字节
//<YA_Vol_BalSL> 0D 10 2B 2个字节
//<YA_Vol_BalSR> 0D 10 2C 2个字节
//<YA_Vol_FadF> 0D 10 23 2个字节
//<YA_Vol_FadR> 0D 10 24 2个字节




const BYTE BassFreqsel[]={
0x38, 6, 0x0D, 0x00, 0x6E, 0x00, 0x04, 0x1B,//<SrcSw_OrDigSrcSelMask>
0x38, 6, 0x0D, 0x00, 0x6F, 0x00, 0x00, 0x0B,//<EasyP_Index>
//YA_OFFSET
0x38, 25, 0x0D, 0x10, 0x00, 0x03, 0xF7, 0x02, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0xDD, 0x00, 0x04, 0x02, 0xDD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//60Hz  最后两字节代表增益
0x38, 25, 0x0D, 0x10, 0x00, 0x03, 0xF4, 0x03, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x6C, 0x00, 0x05, 0x06, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//80Hz
0x38, 25, 0x0D, 0x10, 0x00, 0x03, 0xF1, 0x04, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0xF2, 0x00, 0x07, 0x01, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00//100Hz
};


//<YA_Vol_SrcScalP> 0D 10 2D 2个字节
//<YA_Vol_SrcScalS> 0D 14 86 2个字节
const BYTE TEF6638_InputGain_Data_PS[]={//-6~6dB
0x02,0x01,
0x02,0x40,
0x02,0x86,
0x02,0xD5,
0x03,0x2D,
0x03,0x91,
0x04,0x00,
0x04,0x7D,
0x05,0x09,
0x06,0x57,
0x07,0x1D,
0x07,0xFB
};


typedef struct
{
	U8 input;
	U8 gain;
} AudioGainTable;

const AudioGainTable TEF6638_audioChannelGainTab[] = 
{
	{Init,0},
	{MediaCD,1},
	{CDC,0},
	{RADIO,3},
	{AUX,5},
	{IPOD,1},
	{TV,4},
	{MediaMP3,3},
	{SRADIO,1},
	{A2DP,1},
	{EXT_TEL,0},
	{GR_AUDIO,0},
	{MediaSystem,3},
	{BACK,0},
	{GPS,0},
	{BT_RING,3},
	{BT,6},
	{DVR,3},
	{VAP,3},
	{FRONT_CAMERA,3},
	{SYSTEM_RING,3},
	{0,0},
};

BYTE delay_not[]={
//Delay1=0ms,(Front Left Speaker)
0x38, 6, 0x0D, 0x05, 0x62, 0x00, 0x00, 0x01,//XA_Delay_Length1_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay2=0ms,(Front Right Speaker)
0x38, 6, 0x0D, 0x05, 0x63, 0x00, 0x00, 0x01,//XA_Delay_Length2_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay3=0ms,(Rear Left Speaker)
0x38, 6, 0x0D, 0x05, 0x64, 0x00, 0x00, 0x01,//XA_Delay_Length3_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay4=0ms,(Rear Right Speaker)
0x38, 6, 0x0D, 0x05, 0x65, 0x00, 0x00, 0x01,//XA_Delay_Length4_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag
0
};

BYTE delay_pos1[]={
//Delay1=4.1ms
0x38, 6, 0x0D, 0x05, 0x62, 0x00, 0x00, 0xB6,//XA_Delay_Length1_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay2=1.2ms
0x38, 6, 0x0D, 0x05, 0x63, 0x00, 0x00, 0x36,//XA_Delay_Length2_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay3=1.2ms
0x38, 6, 0x0D, 0x05, 0x64, 0x00, 0x00, 0x36,//XA_Delay_Length3_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay4=0ms
0x38, 6, 0x0D, 0x05, 0x65, 0x00, 0x00, 0x01,//XA_Delay_Length4_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag
0
};

BYTE delay_pos2[]={
//Delay1=1.2ms
0x38, 6, 0x0D, 0x05, 0x62, 0x00, 0x00, 0x36,//XA_Delay_Length1_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay2=4.1ms
0x38, 6, 0x0D, 0x05, 0x63, 0x00, 0x00, 0xB6,//XA_Delay_Length2_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay3=0ms
0x38, 6, 0x0D, 0x05, 0x64, 0x00, 0x00, 0x01,//XA_Delay_Length3_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay4=1.2ms
0x38, 6, 0x0D, 0x05, 0x65, 0x00, 0x00, 0x36,//XA_Delay_Length4_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag
0
};
const BYTE delay_pos3[]={
//Delay1=1.2ms
0x38, 6, 0x0D, 0x05, 0x62, 0x00, 0x00, 0x36,//XA_Delay_Length1_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay2=0ms
0x38, 6, 0x0D, 0x05, 0x63, 0x00, 0x00, 0x01,//XA_Delay_Length2_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay3=4.1ms
0x38, 6, 0x0D, 0x05, 0x64, 0x00, 0x00, 0xB6,//XA_Delay_Length3_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag

//Delay4=1.2ms
0x38, 6, 0x0D, 0x05, 0x65, 0x00, 0x00, 0x36,//XA_Delay_Length4_In
0x38, 6, 0x0D, 0x05, 0x68, 0x7F, 0xFF, 0xFF,//XA_Delay_InitFlag
0
};
const BYTE delay_pos4[]={
//Delay1=0ms, L1=1, X:Delay_Length1_In=0x000001
0x38,6,0x0D,0x04,0x56,0x00,0x00,0x01,
0x38,6,0x0D,0x04,0x5C,0x7F,0xFF,0xFF,
//Delay2=1.2ms, L2=53,  X:Delay_Length2_In=0x000035
0x38,6,0x0D,0x04,0x57,0x00,0x00,0x35,
0x38,6,0x0D,0x04,0x5C,0x7F,0xFF,0xFF,
//Delay3=1.2ms, L3=53,  X:Delay_Length3_In=0x000035
0x38,6,0x0D,0x04,0x58,0x00,0x00,0x35,
0x38,6,0x0D,0x04,0x5C,0x7F,0xFF,0xFF,
//Delay4=4.1ms, L4=181,  X:Delay_Length4_In=0x0000B5
0x38,6,0x0D,0x04,0x59,0x00,0x00,0xB5,
0x38,6,0x0D,0x04,0x5C,0x7F,0xFF,0xFF,
0
};



#ifdef __cplusplus
}
#endif

#endif// __TEF6638_DATA_H__
