
---------lidbg提供调试手段----------
节点/dev/mlidbg0 写命令:
mem:
echo "c mem r 0xf020408c 1" > /dev/mlidbg0
echo "c mem w 0xf040000c 0x200014" > /dev/mlidbg0
echo "c mem rb 0xf04000c4 24 5" > /dev/mlidbg0
echo "c mem wb 0xF08A0038 26 1 0" > /dev/mlidbg0

i2c:
echo "c i2c w 1 0x4a 2 0x5 0xa0" > /dev/mlidbg0
echo "c i2c r 1 0x5c 0x0 20" > /dev/mlidbg0

io:
echo "c io r 30" > /dev/mlidbg0
echo "c io w 108 1" > /dev/mlidbg0

key:
echo "c key home 2" > /dev/mlidbg0
echo "c key 107 2" > /dev/mlidbg0

touch:
echo "c touch 100 480 1" > /dev/mlidbg0
echo "c touch 100 480 0" > /dev/mlidbg0

soc:
echo "c soc ad 2" > /dev/mlidbg0
echo "c soc bl 255" > /dev/mlidbg0


mem_log:
----------保存lidbg信息到文件---------
当没定义NOT_USE_MEM_LOG时，保存lidbg中通过lidbg(msg...)/lidbgerr(msg...)/FS_ERR(fmt, args...)接口打印的信息到kfifo，该kfifo由lidbg_mem_log.c维护，并默认最多只会保存截止当前最新的LIDBG_FIFO_SIZE(4k)信息；
修改/data/lidbg/core.txt中dump_mem_log为“1”，或者adb shell执行echo "c mem_log dump" > /dev/mlidbg0，会将当前kfifo中的信息保存到/data/lidbg/lidbg_mem_log.txt中；

trace_msg:
----------过滤出包含关键字的内核打印信息---------
在lidbg_qrd/soc/DBG_SOC/drivers_conf/lidbg_trace_msg_string_list.conf中添加要跟踪的关键字，以行为单位；
该调试功能默认使能，当插上adb调试线时会disable该功能，或者修改/data/lidbg/core.txt中的trace_msg_disable为“1”，也会disable该功能；
跟踪到包含关键字的整条打印信息会保存在/data/lidbg/lidbg_trace_msg.txt中；

ts_event:

fs_conf:

cmd.conf

core.conf
----------通过core.txt来发一些shell指令---------
打开/data/lidbg/core.txt文件修改如下内容可做些简单的命令;如下
分号为指令分隔符，逗号为参数分隔符，如下四条指令均会执行
cmdstring=chmod,/flysystem;echo,add,/sys/block/sda/uevent;remount,/flysystem;rmdir,/system/lib/modules/out11

chmod,/flysystem修改/flysystem权限为777
rmdir,/flysystem/lib/out删除out目录
remount,/flysystem重新挂载/flysystem分区为读写
echo,c io w 27 1,/dev/mlidbg0将c io w 27 1写到/dev/mlidbg0


state.conf


drivers.conf

fs_log:

update:


3G电话拨号:




----------增加读文件夹内文件列表接口lidbg_readdir_and_dealfile---------
接口描述:
bool lidbg_readdir_and_dealfile(char *insure_is_dir, void *callback(char *dirname, char *filename))
函数功能是读取文件夹内都有什么文件，生成文件链表，然后再遍历链表回调callback去处理.
